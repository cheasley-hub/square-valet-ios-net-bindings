#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef VALET_SWIFT_H
#define VALET_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Valet",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

typedef SWIFT_ENUM_NAMED(NSInteger, VALAccessibility, "Accessibility", open) {
/// Valet data can only be accessed while the device is unlocked. This attribute is recommended for data that only needs to be accessible while the application is in the foreground. Valet data with this attribute will migrate to a new device when using encrypted backups.
  VALAccessibilityWhenUnlocked = 1,
/// Valet data cannot be accessed after a restart until the device has been unlocked once; data is accessible until the device is next rebooted. This attribute is recommended for data that needs to be accessible by background applications. Valet data with this attribute will migrate to a new device when using encrypted backups.
  VALAccessibilityAfterFirstUnlock = 2,
/// Valet data can only be accessed while the device is unlocked. This attribute is recommended for items that only need to be accessible while the application is in the foreground. Valet data with this attribute will never migrate to a new device, so these items will be missing after a backup is restored to a new device. No items can be stored in this class on devices without a passcode. Disabling the device passcode will cause all items in this class to be deleted.
  VALAccessibilityWhenPasscodeSetThisDeviceOnly = 4,
/// Valet data can only be accessed while the device is unlocked. This is recommended for data that only needs to be accessible while the application is in the foreground. Valet data with this attribute will never migrate to a new device, so these items will be missing after a backup is restored to a new device.
  VALAccessibilityWhenUnlockedThisDeviceOnly = 5,
/// Valet data cannot be accessed after a restart until the device has been unlocked once; data is accessible until the device is next rebooted. This attribute is recommended for data that needs to be accessible by background applications. Valet data with this attribute will never migrate to a new device, so these items will be missing after a backup is restored to a new device.
  VALAccessibilityAfterFirstUnlockThisDeviceOnly = 6,
};

typedef SWIFT_ENUM_NAMED(NSInteger, VALCloudAccessibility, "CloudAccessibility", open) {
/// Valet data can only be accessed while the device is unlocked. This attribute is recommended for data that only needs to be accessible while the application is in the foreground. Valet data with this attribute will migrate to a new device when using encrypted backups.
  VALCloudAccessibilityWhenUnlocked = 1,
/// Valet data cannot be accessed after a restart until the device has been unlocked once; data is accessible until the device is next rebooted. This attribute is recommended for data that needs to be accessible by background applications. Valet data with this attribute will migrate to a new device when using encrypted backups.
  VALCloudAccessibilityAfterFirstUnlock = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, VALKeychainError, "KeychainError", open) {
/// The keychain could not be accessed.
  VALKeychainErrorCouldNotAccessKeychain = 0,
/// User dismissed the user-presence prompt.
  VALKeychainErrorUserCancelled = 1,
/// No data was found for the requested key.
  VALKeychainErrorItemNotFound = 2,
/// The application does not have the proper entitlements to perform the requested action.
/// This may be due to an Apple Keychain bug. As a workaround try running on a device that is not attached to a debugger.
/// seealso:
/// https://forums.developer.apple.com/thread/4743
  VALKeychainErrorMissingEntitlement = 3,
/// The key provided is empty.
  VALKeychainErrorEmptyKey = 4,
/// The value provided is empty.
  VALKeychainErrorEmptyValue = 5,
};
static NSString * _Nonnull const VALKeychainErrorDomain = @"Valet.KeychainError";

typedef SWIFT_ENUM_NAMED(NSInteger, VALMigrationResult, "MigrationError", open) {
/// Migration failed because the keychain query was not valid.
  VALMigrationResultInvalidQuery = 0,
/// Migration failed because a key staged for migration was invalid.
  VALMigrationResultKeyToMigrateInvalid = 1,
/// Migration failed because some data staged for migration was invalid.
  VALMigrationResultDataToMigrateInvalid = 2,
/// Migration failed because two equivalent keys were staged for migration.
  VALMigrationResultDuplicateKeyToMigrate = 3,
/// Migration failed because a key staged for migration duplicates a key already managed by Valet.
  VALMigrationResultKeyToMigrateAlreadyExistsInValet = 4,
/// Migration failed because removing the migrated data from the keychain failed.
  VALMigrationResultRemovalFailed = 5,
};
static NSString * _Nonnull const VALMigrationResultDomain = @"Valet.MigrationError";

@class NSData;
SWIFT_CLASS_NAMED("ObjectiveCCompatibilityMigratableKeyValuePairInput")
@interface VALMigratableKeyValuePairInput : NSObject
/// The key in the key:value pair.
@property (nonatomic, readonly) id _Nonnull key;
/// The value in the key:value pair.
@property (nonatomic, readonly, copy) NSData * _Nonnull value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
SWIFT_CLASS_NAMED("ObjectiveCCompatibilityMigratableKeyValuePairOutput")
@interface VALMigratableKeyValuePairOutput : NSObject
/// Creates a migratable key:value pair with the provided inputs.
/// \param key The key in the key:value pair.
///
/// \param value The value in the key:value pair.
///
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key value:(NSData * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
/// Creates a migratable key:value pair with the provided inputs.
/// \param key The key in the key:value pair.
///
/// \param stringValue The desired value in the key:value pair, represented as a String.
///
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key stringValue:(NSString * _Nonnull)stringValue OBJC_DESIGNATED_INITIALIZER;
/// A sentinal <code>ObjectiveCCompatibilityMigratableKeyValuePairOutput</code> that conveys that the migration should be prevented.
+ (VALMigratableKeyValuePairOutput * _Nonnull)preventMigration SWIFT_WARN_UNUSED_RESULT;
/// The key in the key:value pair.
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// The value in the key:value pair.
@property (nonatomic, readonly, copy) NSData * _Nonnull value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, VALSecureEnclaveAccessControl, "SecureEnclaveAccessControl", open) {
/// Access to keychain elements requires user presence verification via Touch ID, Face ID, or device Passcode. On macOS 10.15 and later, this element may also be accessed via a prompt on a paired watch. Keychain elements are still accessible by Touch ID even if fingers are added or removed. Touch ID does not have to be available or enrolled.
  VALSecureEnclaveAccessControlUserPresence = 1,
/// Access to keychain elements requires user presence verification via Face ID, or any finger enrolled in Touch ID. Keychain elements remain accessible via Face ID or Touch ID after faces or fingers are added or removed. Face ID must be enabled with at least one face enrolled, or Touch ID must be available and at least one finger must be enrolled.
  VALSecureEnclaveAccessControlBiometricAny = 2,
/// Access to keychain elements requires user presence verification via the face currently enrolled in Face ID, or fingers currently enrolled in Touch ID. Previously written keychain elements become inaccessible when faces or fingers are added or removed. Face ID must be enabled with at least one face enrolled, or Touch ID must be available and at least one finger must be enrolled.
  VALSecureEnclaveAccessControlBiometricCurrentSet = 3,
/// Access to keychain elements requires user presence verification via device Passcode.
  VALSecureEnclaveAccessControlDevicePasscode = 4,
};

@class VALValet;
/// Reads and writes keychain elements that are stored on the Secure Enclave using Accessibility attribute <code>.whenPasscodeSetThisDeviceOnly</code>. Accessing these keychain elements will require the user to confirm their presence via Touch ID, Face ID, or passcode entry. If no passcode is set on the device, accessing the keychain via a <code>SecureEnclaveValet</code> will fail. Data is removed from the Secure Enclave when the user removes a passcode from the device.
SWIFT_CLASS_NAMED("SecureEnclaveValet")
@interface VALSecureEnclaveValet : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly) enum VALSecureEnclaveAccessControl accessControl;
/// note:
/// Determined by writing a value to the keychain and then reading it back out. Will never prompt the user for Face ID, Touch ID, or password.
///
/// returns:
/// <code>true</code> if the keychain is accessible for reading and writing, <code>false</code> otherwise.
- (BOOL)canAccessKeychain SWIFT_WARN_UNUSED_RESULT;
/// important:
/// Inserted data should be no larger than 4kb.
/// \param object A Data value to be inserted into the keychain.
///
/// \param key A key that can be used to retrieve the <code>object</code> from the keychain.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
- (BOOL)setObject:(NSData * _Nonnull)object forKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// \param key A key used to retrieve the desired object from the keychain.
///
/// \param userPrompt The prompt displayed to the user in Apple’s Face ID, Touch ID, or passcode entry UI.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
///
/// returns:
/// The data currently stored in the keychain for the provided key.
- (NSData * _Nullable)objectForKey:(NSString * _Nonnull)key withPrompt:(NSString * _Nonnull)userPrompt error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// important:
/// Inserted data should be no larger than 4kb.
/// \param string A String value to be inserted into the keychain.
///
/// \param key A key that can be used to retrieve the <code>string</code> from the keychain.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
- (BOOL)setString:(NSString * _Nonnull)string forKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// \param key A key used to retrieve the desired object from the keychain.
///
/// \param userPrompt The prompt displayed to the user in Apple’s Face ID, Touch ID, or passcode entry UI.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
///
/// returns:
/// The string currently stored in the keychain for the provided key.
- (NSString * _Nullable)stringForKey:(NSString * _Nonnull)key withPrompt:(NSString * _Nonnull)userPrompt error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Removes a key/object pair from the keychain.
/// \param key A key used to remove the desired object from the keychain.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
- (BOOL)removeObjectForKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// Removes all key/object pairs accessible by this Valet instance from the keychain.
///
/// throws:
/// An error of type <code>KeychainError</code>.
- (BOOL)removeAllObjectsAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Migrates objects matching the input query into the receiving SecureEnclaveValet instance.
/// note:
/// The keychain is not modified if an error is thrown.
/// \param query The query with which to retrieve existing keychain data via a call to SecItemCopyMatching.
///
/// \param removeOnCompletion If <code>true</code>, the migrated data will be removed from the keychain if the migration succeeds.
///
///
/// throws:
/// An error of type <code>KeychainError</code> or <code>MigrationError</code>.
- (BOOL)migrateObjectsMatching:(NSDictionary<NSString *, NSObject *> * _Nonnull)query removeOnCompletion:(BOOL)removeOnCompletion error:(NSError * _Nullable * _Nullable)error;
/// Migrates objects matching the vended keychain query into the receiving SecureEnclaveValet instance.
/// note:
/// The keychain is not modified if an error is thrown.
/// \param valet A Valet whose vended keychain query is used to retrieve existing keychain data via a call to SecItemCopyMatching.
///
/// \param removeOnCompletion If <code>true</code>, the migrated data will be removed from the keychfain if the migration succeeds.
///
///
/// throws:
/// An error of type <code>KeychainError</code> or <code>MigrationError</code>.
- (BOOL)migrateObjectsFrom:(VALValet * _Nonnull)valet removeOnCompletion:(BOOL)removeOnCompletion error:(NSError * _Nullable * _Nullable)error;
@end

@interface VALSecureEnclaveValet (SWIFT_EXTENSION(Valet))
/// \param identifier A non-empty string that uniquely identifies a SecureEnclaveValet.
///
/// \param accessControl The desired access control for the SecureEnclaveValet.
///
///
/// returns:
/// A SecureEnclaveValet that reads/writes keychain elements with the desired flavor.
+ (VALSecureEnclaveValet * _Nullable)valetWithIdentifier:(NSString * _Nonnull)identifier accessControl:(enum VALSecureEnclaveAccessControl)accessControl SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// https://developer.apple.com/documentation/security/keychain_services/keychain_items/sharing_access_to_keychain_items_among_a_collection_of_apps
/// \param appIDPrefix The application’s App ID prefix. This string can be found by inspecting the application’s provisioning profile, or viewing the application’s App ID Configuration on developer.apple.com. This string must not be empty.
///
/// \param identifier An identifier that cooresponds to a value in keychain-access-groups in the application’s Entitlements file. This string must not be empty.
///
/// \param accessControl The desired access control for the SecureEnclaveValet.
///
///
/// returns:
/// A SecureEnclaveValet that reads/writes keychain elements that can be shared across applications written by the same development team.
+ (VALSecureEnclaveValet * _Nullable)sharedGroupValetWithAppIDPrefix:(NSString * _Nonnull)appIDPrefix sharedGroupIdentifier:(NSString * _Nonnull)identifier accessControl:(enum VALSecureEnclaveAccessControl)accessControl SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// https://developer.apple.com/documentation/security/keychain_services/keychain_items/sharing_access_to_keychain_items_among_a_collection_of_apps
/// \param groupPrefix On iOS, iPadOS, watchOS, and tvOS, this prefix must equal “group”. On macOS, this prefix is the application’s App ID prefix, which can be found by inspecting the application’s provisioning profile, or viewing the application’s App ID Configuration on developer.apple.com. This string must not be empty.
///
/// \param identifier An identifier that corresponds to a value in com.apple.security.application-groups in the application’s Entitlements file. This string must not be empty.
///
/// \param accessControl The desired access control for the SecureEnclaveValet.
///
///
/// returns:
/// A SecureEnclaveValet that reads/writes keychain elements that can be shared across applications written by the same development team.
+ (VALSecureEnclaveValet * _Nullable)sharedGroupValetWithGroupPrefix:(NSString * _Nonnull)groupPrefix sharedGroupIdentifier:(NSString * _Nonnull)identifier accessControl:(enum VALSecureEnclaveAccessControl)accessControl SWIFT_WARN_UNUSED_RESULT;
/// note:
/// Will never prompt the user for Face ID, Touch ID, or password.
/// \param key The key to look up in the keychain.
///
///
/// returns:
/// <code>true</code> if a value has been set for the given key, <code>false</code> otherwise. Will return <code>false</code> if the keychain is not accessible.
- (BOOL)containsObjectForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

/// Reads and writes keychain elements that are stored on the Secure Enclave using Accessibility attribute <code>.whenPasscodeSetThisDeviceOnly</code>. The first access of these keychain elements will require the user to confirm their presence via Touch ID, Face ID, or passcode entry. If no passcode is set on the device, accessing the keychain via a <code>SinglePromptSecureEnclaveValet</code> will fail. Data is removed from the Secure Enclave when the user removes a passcode from the device.
SWIFT_CLASS_NAMED("SinglePromptSecureEnclaveValet")
@interface VALSinglePromptSecureEnclaveValet : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly) enum VALSecureEnclaveAccessControl accessControl;
/// note:
/// Determined by writing a value to the keychain and then reading it back out. Will never prompt the user for Face ID, Touch ID, or password.
///
/// returns:
/// <code>true</code> if the keychain is accessible for reading and writing, <code>false</code> otherwise.
- (BOOL)canAccessKeychain SWIFT_WARN_UNUSED_RESULT;
/// important:
/// Inserted data should be no larger than 4kb.
/// \param object A Data value to be inserted into the keychain.
///
/// \param key A key that can be used to retrieve the <code>object</code> from the keychain.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
- (BOOL)setObject:(NSData * _Nonnull)object forKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// \param key A key used to retrieve the desired object from the keychain.
///
/// \param userPrompt The prompt displayed to the user in Apple’s Face ID, Touch ID, or passcode entry UI. If the <code>SinglePromptSecureEnclaveValet</code> has already been unlocked, no prompt will be shown.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
///
/// returns:
/// The data currently stored in the keychain for the provided key.
- (NSData * _Nullable)objectForKey:(NSString * _Nonnull)key withPrompt:(NSString * _Nonnull)userPrompt error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// important:
/// Inserted data should be no larger than 4kb.
/// \param string A String value to be inserted into the keychain.
///
/// \param key A key that can be used to retrieve the <code>string</code> from the keychain.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
- (BOOL)setString:(NSString * _Nonnull)string forKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// \param key A key used to retrieve the desired object from the keychain.
///
/// \param userPrompt The prompt displayed to the user in Apple’s Face ID, Touch ID, or passcode entry UI. If the <code>SinglePromptSecureEnclaveValet</code> has already been unlocked, no prompt will be shown.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
///
/// returns:
/// The string currently stored in the keychain for the provided key.
- (NSString * _Nullable)stringForKey:(NSString * _Nonnull)key withPrompt:(NSString * _Nonnull)userPrompt error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Forces a prompt for Face ID, Touch ID, or passcode entry on the next data retrieval from the Secure Enclave.
- (void)requirePromptOnNextAccess;
/// \param userPrompt The prompt displayed to the user in Apple’s Face ID, Touch ID, or passcode entry UI. If the <code>SinglePromptSecureEnclaveValet</code> has already been unlocked, no prompt will be shown. If no items are found, will return an empty set.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
///
/// returns:
/// The set of all (String) keys currently stored in this Valet instance.
- (NSSet<NSString *> * _Nullable)allKeysWithUserPrompt:(NSString * _Nonnull)userPrompt error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Removes a key/object pair from the keychain.
/// \param key A key used to remove the desired object from the keychain.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
- (BOOL)removeObjectForKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// Removes all key/object pairs accessible by this Valet instance from the keychain.
///
/// throws:
/// An error of type <code>KeychainError</code>.
- (BOOL)removeAllObjectsAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Migrates objects matching the input query into the receiving SinglePromptSecureEnclaveValet instance.
/// note:
/// The keychain is not modified if an error is thrown.
/// \param query The query with which to retrieve existing keychain data via a call to SecItemCopyMatching.
///
/// \param removeOnCompletion If <code>true</code>, the migrated data will be removed from the keychain if the migration succeeds.
///
///
/// throws:
/// An error of type <code>KeychainError</code> or <code>MigrationError</code>.
- (BOOL)migrateObjectsMatching:(NSDictionary<NSString *, NSObject *> * _Nonnull)query removeOnCompletion:(BOOL)removeOnCompletion error:(NSError * _Nullable * _Nullable)error;
/// Migrates objects matching the vended keychain query into the receiving SinglePromptSecureEnclaveValet instance.
/// note:
/// The keychain is not modified if an error is thrown.
/// \param valet A Valet whose vended keychain query is used to retrieve existing keychain data via a call to SecItemCopyMatching.
///
/// \param removeOnCompletion If <code>true</code>, the migrated data will be removed from the keychfain if the migration succeeds.
///
///
/// throws:
/// An error of type <code>KeychainError</code> or <code>MigrationError</code>.
- (BOOL)migrateObjectsFrom:(VALValet * _Nonnull)valet removeOnCompletion:(BOOL)removeOnCompletion error:(NSError * _Nullable * _Nullable)error;
@end

@interface VALSinglePromptSecureEnclaveValet (SWIFT_EXTENSION(Valet))
/// \param identifier A non-empty string that uniquely identifies a SinglePromptSecureEnclaveValet.
///
/// \param accessControl The desired access control for the SinglePromptSecureEnclaveValet.
///
///
/// returns:
/// A SinglePromptSecureEnclaveValet that reads/writes keychain elements with the desired flavor.
+ (VALSinglePromptSecureEnclaveValet * _Nullable)valetWithIdentifier:(NSString * _Nonnull)identifier accessControl:(enum VALSecureEnclaveAccessControl)accessControl SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// https://developer.apple.com/documentation/security/keychain_services/keychain_items/sharing_access_to_keychain_items_among_a_collection_of_apps
/// \param appIDPrefix The application’s App ID prefix. This string can be found by inspecting the application’s provisioning profile, or viewing the application’s App ID Configuration on developer.apple.com. This string must not be empty.
///
/// \param identifier An identifier that cooresponds to a value in keychain-access-groups in the application’s Entitlements file. This string must not be empty.
///
/// \param accessControl The desired access control for the SinglePromptSecureEnclaveValet.
///
///
/// returns:
/// A SinglePromptSecureEnclaveValet that reads/writes keychain elements that can be shared across applications written by the same development team.
+ (VALSinglePromptSecureEnclaveValet * _Nullable)sharedGroupValetWithAppIDPrefix:(NSString * _Nonnull)appIDPrefix sharedGroupIdentifier:(NSString * _Nonnull)identifier accessControl:(enum VALSecureEnclaveAccessControl)accessControl SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// https://developer.apple.com/documentation/security/keychain_services/keychain_items/sharing_access_to_keychain_items_among_a_collection_of_apps
/// \param groupPrefix On iOS, iPadOS, watchOS, and tvOS, this prefix must equal “group”. On macOS, this prefix is the application’s App ID prefix, which can be found by inspecting the application’s provisioning profile, or viewing the application’s App ID Configuration on developer.apple.com. This string must not be empty.
///
/// \param identifier An identifier that corresponds to a value in com.apple.security.application-groups in the application’s Entitlements file. This string must not be empty.
///
/// \param accessControl The desired access control for the SinglePromptSecureEnclaveValet.
///
///
/// returns:
/// A SinglePromptSecureEnclaveValet that reads/writes keychain elements that can be shared across applications written by the same development team.
+ (VALSinglePromptSecureEnclaveValet * _Nullable)sharedGroupValetWithGroupPrefix:(NSString * _Nonnull)groupPrefix sharedGroupIdentifier:(NSString * _Nonnull)identifier accessControl:(enum VALSecureEnclaveAccessControl)accessControl SWIFT_WARN_UNUSED_RESULT;
/// note:
/// Will never prompt the user for Face ID, Touch ID, or password.
/// \param key The key to look up in the keychain.
///
///
/// returns:
/// <code>true</code> if a value has been set for the given key, <code>false</code> otherwise. Will return <code>false</code> if the keychain is not accessible.
- (BOOL)containsObjectForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

/// Reads and writes keychain elements.
SWIFT_CLASS_NAMED("Valet")
@interface VALValet : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly) enum VALAccessibility accessibility;
/// note:
/// Determined by writing a value to the keychain and then reading it back out.
///
/// returns:
/// <code>true</code> if the keychain is accessible for reading and writing, <code>false</code> otherwise.
- (BOOL)canAccessKeychain SWIFT_WARN_UNUSED_RESULT;
/// important:
/// Inserted data should be no larger than 4kb.
/// \param object A Data value to be inserted into the keychain.
///
/// \param key A key that can be used to retrieve the <code>object</code> from the keychain.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
- (BOOL)setObject:(NSData * _Nonnull)object forKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// \param key A key used to retrieve the desired object from the keychain.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
///
/// returns:
/// The data currently stored in the keychain for the provided key.
- (NSData * _Nullable)objectForKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// important:
/// Inserted data should be no larger than 4kb.
/// \param string A String value to be inserted into the keychain.
///
/// \param key A key that can be used to retrieve the <code>string</code> from the keychain.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
- (BOOL)setString:(NSString * _Nonnull)string forKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// \param key A key used to retrieve the desired object from the keychain.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
///
/// returns:
/// The string currently stored in the keychain for the provided key.
- (NSString * _Nullable)stringForKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// throws:
/// An error of type <code>KeychainError</code>.
///
/// returns:
/// The set of all (String) keys currently stored in this Valet instance. If no items are found, will return an empty set.
- (NSSet<NSString *> * _Nullable)allKeysAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Removes a key/object pair from the keychain.
/// note:
/// No error is thrown if the <code>key</code> is not found in the keychain.
/// \param key A key used to remove the desired object from the keychain.
///
///
/// throws:
/// An error of type <code>KeychainError</code>.
- (BOOL)removeObjectForKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// Removes all key/object pairs accessible by this Valet instance from the keychain.
///
/// throws:
/// An error of type <code>KeychainError</code>.
- (BOOL)removeAllObjectsAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Migrates objects matching the input query into the receiving Valet instance.
/// note:
/// The keychain is not modified if an error is thrown.
/// \param query The query with which to retrieve existing keychain data via a call to SecItemCopyMatching.
///
/// \param removeOnCompletion If <code>true</code>, the migrated data will be removed from the keychain if the migration succeeds.
///
///
/// throws:
/// An error of type <code>KeychainError</code> or <code>MigrationError</code>.
- (BOOL)migrateObjectsMatching:(NSDictionary<NSString *, NSObject *> * _Nonnull)query removeOnCompletion:(BOOL)removeOnCompletion error:(NSError * _Nullable * _Nullable)error;
/// Migrates objects in the input Valet into the receiving Valet instance.
/// note:
/// The keychain is not modified if an error is thrown.
/// \param valet The Valet used to retrieve the existing keychain data that should be migrated.
///
/// \param removeOnCompletion If <code>true</code>, the migrated data will be removed from the keychain if the migration succeeds.
///
///
/// throws:
/// An error of type <code>KeychainError</code> or <code>MigrationError</code>.
- (BOOL)migrateObjectsFrom:(VALValet * _Nonnull)valet removeOnCompletion:(BOOL)removeOnCompletion error:(NSError * _Nullable * _Nullable)error;
/// Call this method if your Valet used to have its accessibility set to <code>always</code>.
/// This method migrates objects set on a Valet with the same type and identifier, but with its accessibility set to <code>always</code> (which was possible prior to Valet 4.0) to the current Valet.
/// note:
/// The keychain is not modified if an error is thrown.
/// \param removeOnCompletion If <code>true</code>, the migrated data will be removed from the keychain if the migration succeeds.
///
///
/// throws:
/// An error of type <code>KeychainError</code> or <code>MigrationError</code>.
- (BOOL)migrateObjectsFromAlwaysAccessibleValetWithRemoveOnCompletion:(BOOL)removeOnCompletion error:(NSError * _Nullable * _Nullable)error;
/// Call this method if your Valet used to have its accessibility set to <code>alwaysThisDeviceOnly</code>.
/// This method migrates objects set on a Valet with the same type and identifier, but with its accessibility set to <code>alwaysThisDeviceOnly</code> (which was possible prior to Valet 4.0) to the current Valet.
/// note:
/// The keychain is not modified if an error is thrown.
/// \param removeOnCompletion If <code>true</code>, the migrated data will be removed from the keychain if the migration succeeds.
///
///
/// throws:
/// An error of type <code>KeychainError</code> or <code>MigrationError</code>.
- (BOOL)migrateObjectsFromAlwaysAccessibleThisDeviceOnlyValetWithRemoveOnCompletion:(BOOL)removeOnCompletion error:(NSError * _Nullable * _Nullable)error;
@end

@interface VALValet (SWIFT_EXTENSION(Valet))
/// \param identifier A non-empty string that uniquely identifies a Valet.
///
/// \param accessibility The desired accessibility for the Valet.
///
///
/// returns:
/// A Valet that reads/writes keychain elements with the desired accessibility.
+ (VALValet * _Nullable)valetWithIdentifier:(NSString * _Nonnull)identifier accessibility:(enum VALAccessibility)accessibility SWIFT_WARN_UNUSED_RESULT;
/// \param identifier A non-empty string that uniquely identifies a Valet.
///
/// \param accessibility The desired accessibility for the Valet.
///
///
/// returns:
/// A Valet that reads/writes iCloud-shared keychain elements with the desired accessibility.
+ (VALValet * _Nullable)iCloudValetWithIdentifier:(NSString * _Nonnull)identifier accessibility:(enum VALCloudAccessibility)accessibility SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// https://developer.apple.com/documentation/security/keychain_services/keychain_items/sharing_access_to_keychain_items_among_a_collection_of_apps
/// \param appIDPrefix The application’s App ID prefix. This string can be found by inspecting the application’s provisioning profile, or viewing the application’s App ID Configuration on developer.apple.com. This string must not be empty.
///
/// \param identifier An identifier that corresponds to a value in keychain-access-groups in the application’s Entitlements file. This string must not be empty.
///
/// \param accessibility The desired accessibility for the Valet.
///
///
/// returns:
/// A Valet that reads/writes keychain elements that can be shared across applications written by the same development team.
+ (VALValet * _Nullable)sharedGroupValetWithAppIDPrefix:(NSString * _Nonnull)appIDPrefix sharedGroupIdentifier:(NSString * _Nonnull)identifier accessibility:(enum VALAccessibility)accessibility SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// https://developer.apple.com/documentation/security/keychain_services/keychain_items/sharing_access_to_keychain_items_among_a_collection_of_apps
/// \param groupPrefix On iOS, iPadOS, watchOS, and tvOS, this prefix must equal “group”. On macOS, this prefix is the application’s App ID prefix, which can be found by inspecting the application’s provisioning profile, or viewing the application’s App ID Configuration on developer.apple.com. This string must not be empty.
///
/// \param identifier An identifier that corresponds to a value in com.apple.security.application-groups in the application’s Entitlements file. This string must not be empty.
///
/// \param accessibility The desired accessibility for the Valet.
///
///
/// returns:
/// A Valet that reads/writes keychain elements that can be shared across applications written by the same development team.
+ (VALValet * _Nullable)sharedGroupValetWithGroupPrefix:(NSString * _Nonnull)groupPrefix sharedGroupIdentifier:(NSString * _Nonnull)identifier accessibility:(enum VALAccessibility)accessibility SWIFT_WARN_UNUSED_RESULT;
/// \param appIDPrefix The application’s App ID prefix. This string can be found by inspecting the application’s provisioning profile, or viewing the application’s App ID Configuration on developer.apple.com. This string must not be empty.
///
/// \param identifier An identifier that corresponds to a value in keychain-access-groups in the application’s Entitlements file. This string must not be empty.
///
/// \param accessibility The desired accessibility for the Valet.
///
///
/// returns:
/// A Valet that reads/writes iCloud-shared keychain elements that can be shared across applications written by the same development team.
+ (VALValet * _Nullable)iCloudValetWithAppIDPrefix:(NSString * _Nonnull)appIDPrefix sharedGroupIdentifier:(NSString * _Nonnull)identifier accessibility:(enum VALCloudAccessibility)accessibility SWIFT_WARN_UNUSED_RESULT;
/// \param groupPrefix On iOS, iPadOS, watchOS, and tvOS, this prefix must equal “group”. On macOS, this prefix is the application’s App ID prefix, which can be found by inspecting the application’s provisioning profile, or viewing the application’s App ID Configuration on developer.apple.com. This string must not be empty.
///
/// \param identifier An identifier that corresponds to a value in com.apple.security.application-groups in the application’s Entitlements file. This string must not be empty.
///
/// \param accessibility The desired accessibility for the Valet.
///
///
/// returns:
/// A Valet that reads/writes iCloud-shared keychain elements that can be shared across applications written by the same development team.
+ (VALValet * _Nullable)iCloudValetWithGroupPrefix:(NSString * _Nonnull)groupPrefix sharedGroupIdentifier:(NSString * _Nonnull)identifier accessibility:(enum VALCloudAccessibility)accessibility SWIFT_WARN_UNUSED_RESULT;
/// note:
/// Will never prompt the user for Face ID, Touch ID, or password.
/// \param key The key to look up in the keychain.
///
///
/// returns:
/// <code>true</code> if a value has been set for the given key, <code>false</code> otherwise. Will return <code>false</code> if the keychain is not accessible.
- (BOOL)containsObjectForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Migrates objects matching the input query into the receiving Valet instance.
/// \param query The query with which to retrieve existing keychain data via a call to SecItemCopyMatching.
///
/// \param compactMap A closure that transforms a key:value pair from the raw pair currently in the keychain into a key:value pair we’ll insert into the destination Valet. Returning <code>nil</code> from this closure will cause that key:value pair not to be migrated. Returning <code>VALMigratableKeyValuePairOutput.preventMigration</code> will prevent migrating any key:value pairs.
///
/// \param error An error of type <code>KeychainError</code> or <code>MigrationError</code>.
///
- (BOOL)migrateObjectsMatching:(NSDictionary<NSString *, NSObject *> * _Nonnull)query compactMap:(SWIFT_NOESCAPE VALMigratableKeyValuePairOutput * _Nullable (^ _Nonnull)(VALMigratableKeyValuePairInput * _Nonnull))compactMap error:(NSError * _Nullable * _Nullable)error;
/// Migrates objects matching the input query into the receiving Valet instance.
/// \param valet The Valet used to retrieve the existing keychain data that should be migrated.
///
/// \param compactMap A closure that transforms a key:value pair from the raw pair currently in the keychain into a key:value pair we’ll insert into the destination Valet. Returning <code>nil</code> from this closure will cause that key:value pair not to be migrated. Returning <code>VALMigratableKeyValuePairOutput.preventMigration</code> will prevent migrating any key:value pairs.
///
/// \param error An error of type <code>KeychainError</code> or <code>MigrationError</code>.
///
- (BOOL)migrateObjectsFrom:(VALValet * _Nonnull)valet compactMap:(SWIFT_NOESCAPE VALMigratableKeyValuePairOutput * _Nullable (^ _Nonnull)(VALMigratableKeyValuePairInput * _Nonnull))compactMap error:(NSError * _Nullable * _Nullable)error;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
